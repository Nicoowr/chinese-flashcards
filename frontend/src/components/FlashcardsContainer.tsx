/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/VgrKOuLynZb
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useEffect, useState } from "react";
import { CharacterPanel } from "./CharacterPanel/CharacterPanel";
import { FiltersPanel } from "./FiltersPanel/FiltersPanel";
import { CharacterImportance, CharacterType } from "./types";
import { Card } from "./ui/card";
import { useFetchChineseCharacter } from "./FlashcardsContainer.queries";
import {
  useSetCharacterUnknown,
  useSetCharacterKnown,
} from "./FlashcardsContainer.mutations";

const useAppState = () => {
  const [showIdeogram, setShowIdeogram] = useState(false);
  const [numberOfCharacterFetched, setNumberOfCharacterFetched] = useState(1);
  const [characterType, setCharacterType] = useState<CharacterType | null>(
    null
  );
  const [characterImportance, setCharacterImportance] =
    useState<CharacterImportance | null>("high");

  return {
    showIdeogram,
    setShowIdeogram,
    numberOfCharacterFetched,
    setNumberOfCharacterFetched,
    characterType,
    setCharacterType,
    characterImportance,
    setCharacterImportance,
  };
};

const useKeyboardShortcuts = ({
  handleCheck,
  handleReveal,
  handleUnknown,
}: {
  handleCheck: () => void;
  handleReveal: () => void;
  handleUnknown: () => void;
}) => {
  useEffect(() => {
    const handleKeyDown = async (event: KeyboardEvent) => {
      switch (event.key) {
        case "ArrowLeft":
          await handleCheck();
          break;
        case "ArrowRight":
          await handleUnknown();
          break;
        case "ArrowUp":
          handleReveal();
          break;
        default:
          break;
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [handleCheck, handleReveal, handleUnknown]);
};

export function FlashcardsContainer() {
  const {
    showIdeogram,
    setShowIdeogram,
    numberOfCharacterFetched,
    setNumberOfCharacterFetched,
    characterType,
    setCharacterType,
    characterImportance,
    setCharacterImportance,
  } = useAppState();

  const { data, refetch, isFetching } = useFetchChineseCharacter({
    characterType,
    characterImportance,
  });
  const { handleCharacterUnknown, isCharacterUnknownLoading } =
    useSetCharacterUnknown();
  const { handleCharacterKnown, isCharacterKnownLoading } =
    useSetCharacterKnown();

  const handleCheck = async () => {
    setShowIdeogram(false);
    if (data) {
      await handleCharacterKnown(data.id);
    }
    setNumberOfCharacterFetched((prevState) => prevState + 1);
    refetch();
  };
  const handleReveal = () => {
    setShowIdeogram((prevState) => !prevState);
  };
  const handleUnknown = async () => {
    setShowIdeogram(false);
    if (data) {
      await handleCharacterUnknown(data.id);
    }
    setNumberOfCharacterFetched((prevState) => prevState + 1);
    refetch();
  };
  useKeyboardShortcuts({ handleCheck, handleReveal, handleUnknown });

  const isLoading =
    isCharacterUnknownLoading || isCharacterKnownLoading || isFetching;

  return (
    <div className="dark flex flex-col items-center justify-center h-screen bg-background text-card-foreground">
      <Card className="absolute top-4 right-4 bg-card px-4 py-2 rounded-lg text-sm font-medium">
        {numberOfCharacterFetched}
      </Card>
      <div className="flex w-full max-w-5xl">
        <FiltersPanel
          setCharacterType={setCharacterType}
          setCharacterImportance={setCharacterImportance}
        />
        <CharacterPanel
          data={data ?? null}
          isLoading={isLoading}
          showIdeogram={showIdeogram}
          handleCheck={handleCheck}
          handleReveal={handleReveal}
          handleUnknown={handleUnknown}
        />
      </div>
    </div>
  );
}

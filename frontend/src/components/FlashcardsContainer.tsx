/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/VgrKOuLynZb
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useEffect } from "react"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"

export function FlashcardsContainer() {
  const [currentIndex, setCurrentIndex] = useState(0)
  const [showIdeogram, setShowIdeogram] = useState(false)
  const words = [
    { english: "Hello", chinese: "你好", views: 1234, lastSeen: "2023-05-01" },
    { english: "Thank you", chinese: "谢谢", views: 567, lastSeen: "2023-04-15" },
    { english: "How are you?", chinese: "你好吗?", views: 789, lastSeen: "2023-03-20" },
    { english: "Goodbye", chinese: "再见", views: 345, lastSeen: "2023-02-10" },
    { english: "Yes", chinese: "是", views: 678, lastSeen: "2023-01-01" },
    { english: "No", chinese: "否", views: 234, lastSeen: "2022-12-25" },
  ]
  const handleCheck = () => {
    setCurrentIndex((prevIndex) => prevIndex + 1)
    setShowIdeogram(false)
  }
  const handleReveal = () => {
    setShowIdeogram((prevState) => !prevState)
  }
  const handleUnknown = () => {
    setCurrentIndex((prevIndex) => prevIndex + 1)
    setShowIdeogram(false)
  }
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      switch (event.key) {
      case "ArrowLeft":
        handleCheck()
        break
      case "ArrowRight":
        handleUnknown()
        break
      case "ArrowUp":
        handleReveal()
        break
      default:
        break
      }
    }
    window.addEventListener("keydown", handleKeyDown)
    return () => {
      window.removeEventListener("keydown", handleKeyDown)
    }
  }, [handleCheck, handleReveal, handleUnknown])
  return (
    <div className="dark flex flex-col items-center justify-center h-screen bg-background text-card-foreground">
      <h1 className="text-4xl font-bold mb-8">Language Learning App</h1>
      <Card className="w-full max-w-2xl p-10 space-y-8 bg-card">
        <div className="flex flex-col items-center">
          <div className="flex flex-col items-center gap-4">
            <h2 className="text-4xl font-bold">{words[currentIndex].english}</h2>
            <div className="flex items-center gap-4">
              <div>{words[currentIndex].views} views</div>
              <div>Last seen {words[currentIndex].lastSeen}</div>
            </div>
          </div>
          {showIdeogram && <div className="text-6xl font-bold mt-6">{words[currentIndex].chinese}</div>}
        </div>
        <div className="flex justify-center gap-6">
          <Button onClick={handleCheck} className="text-lg px-6 py-3">
            <CheckIcon className="h-6 w-6" />
            Check
          </Button>
          <Button variant="outline" onClick={handleReveal} className="text-lg px-6 py-3">
            {showIdeogram ? "Hide" : "Reveal"}
          </Button>
          <Button onClick={handleUnknown} className="text-lg px-6 py-3">
            <XIcon className="h-6 w-6" />
            Unknown
          </Button>
        </div>
      </Card>
    </div>
  )
}

function CheckIcon(props: { className: string }) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M20 6 9 17l-5-5" />
    </svg>
  )
}


function XIcon(props: { className: string }) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}

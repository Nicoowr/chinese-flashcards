/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/VgrKOuLynZb
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState, useEffect } from "react";
import { useQuery, useMutation } from "react-query";
import { ChineseCharacter } from "./types";
import { Button } from "./ui/button";
import { Card } from "./ui/card";

const fetchChineseCharacter = async () => {
  const response = await fetch("/api/fetch-chinese-character");
  if (!response.ok) {
    throw new Error("Network response was not ok");
  }
  return response.json();
};

const setCharacterUnknown = async (id: string) => {
  const response = await fetch("/api/character-unknown", {
    method: "POST",
    body: JSON.stringify({ id }),
    headers: {
      "Content-Type": "application/json",
    },
  });
  if (!response.ok) {
    throw new Error("Network response was not ok");
  }
  return response.json();
};

const setCharacterKnown = async (id: string) => {
  const response = await fetch("/api/character-known", {
    method: "POST",
    body: JSON.stringify({ id }),
    headers: {
      "Content-Type": "application/json",
    },
  });
  if (!response.ok) {
    throw new Error("Network response was not ok");
  }
  return response.json();
};

export function FlashcardsContainer() {
  const { data, refetch } = useQuery<ChineseCharacter>(
    "chineseCharacter",
    fetchChineseCharacter,
    { refetchOnWindowFocus: false }
  );

  const { mutateAsync: handleCharacterUnknown } =
    useMutation(setCharacterUnknown);

  const { mutateAsync: handleCharacterKnown } = useMutation(setCharacterKnown);

  const [showIdeogram, setShowIdeogram] = useState(false);

  const handleCheck = async () => {
    setShowIdeogram(false);
    if (data) {
      await handleCharacterKnown(data.id);
    }
    refetch();
  };
  const handleReveal = () => {
    setShowIdeogram((prevState) => !prevState);
  };
  const handleUnknown = async () => {
    setShowIdeogram(false);
    if (data) {
      await handleCharacterUnknown(data.id);
    }
    refetch();
  };
  useEffect(() => {
    const handleKeyDown = async (event: KeyboardEvent) => {
      switch (event.key) {
        case "ArrowLeft":
          await handleCheck();
          break;
        case "ArrowRight":
          await handleUnknown();
          break;
        case "ArrowUp":
          handleReveal();
          break;
        default:
          break;
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [handleCheck, handleReveal, handleUnknown]);
  return (
    <div className="dark flex flex-col items-center justify-center h-screen bg-background text-card-foreground">
      <Card className="w-full max-w-2xl p-10 space-y-8 bg-card">
        <div className="flex flex-col items-center">
          <div className="flex flex-col items-center gap-4">
            <h2 className="text-4xl font-bold">{data?.translation}</h2>
          </div>
          {showIdeogram && (
            <>
              <div className="text-6xl font-bold mt-6">{data?.character}</div>
              <div className="text-xl mt-6">{data?.example}</div>
            </>
          )}
        </div>
        <div className="flex justify-center gap-6">
          <Button onClick={handleCheck} className="text-lg px-6 py-3">
            <CheckIcon className="h-6 w-6" />
            Check
          </Button>
          <Button
            variant="outline"
            onClick={handleReveal}
            className="text-lg px-6 py-3"
          >
            {showIdeogram ? "Hide" : "Reveal"}
          </Button>
          <Button onClick={handleUnknown} className="text-lg px-6 py-3">
            <XIcon className="h-6 w-6" />
            Unknown
          </Button>
        </div>
      </Card>
    </div>
  );
}

function CheckIcon(props: { className: string }) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M20 6 9 17l-5-5" />
    </svg>
  );
}

function XIcon(props: { className: string }) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  );
}
